// Generated by CoffeeScript 1.6.2
/*

  Turn a stream of objects into an RPC system
*/

var delay, through, uuid;

through = require('through');

uuid = require('uuid');

delay = function(ms, func) {
  return setTimeout(func, ms);
};

module.exports = function(options) {
  var handle, stream, timeout, waitingFor;

  if (options == null) {
    options = {};
  }
  waitingFor = {};
  timeout = options.timeout || 2000;
  handle = options.handle;
  stream = through(function(message) {
    var cb, err, id, request, response, timer, _ref,
      _this = this;

    id = message.id, err = message.err, request = message.request, response = message.response;
    if (!id) {
      console.warn("message with no id");
      return;
    }
    if (request) {
      if (handle) {
        return handle(request, function(err, response) {
          return stream.emit('data', {
            id: id,
            err: err,
            response: response
          });
        });
      } else {
        return stream.emit('data', {
          id: id,
          response: request
        });
      }
    } else {
      if (!waitingFor[id]) {
        console.warn("orphaned response with id", id);
        return;
      }
      _ref = waitingFor[id], timer = _ref.timer, cb = _ref.cb;
      delete waitingFor[id];
      clearTimeout(timer);
      return cb(err, response);
    }
  });
  stream.call = function(request, cb) {
    var id, timer,
      _this = this;

    id = uuid.v4();
    timer = setTimeout((function() {
      var _ref;

      _ref = waitingFor[id], timeout = _ref.timeout, cb = _ref.cb;
      clearTimeout(timeout);
      cb(new Error('timeout'));
      return delete waitingFor[id];
    }), timeout);
    waitingFor[id] = {
      timer: timer,
      cb: cb
    };
    return stream.emit('data', {
      id: id,
      request: request
    });
  };
  return stream;
};
